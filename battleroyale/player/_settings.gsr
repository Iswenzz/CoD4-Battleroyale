#include sr\sys\_events;
#include sr\sys\_admins;
#include sr\utils\_common;
#include sr\utils\_hud;
#include sr\player\_settings;

main()
{
	level.settings = [];
	level.settingsMax = 31;

	settings(0,  "hud_crosshair", "Crosshair", 1600, 1, ::update_hudCrosshair, ::toggle_hudCrosshair);
	settings(1,  "hud_fps", "Draw FPS", 1601, true, ::update_hudFPS, ::toggle_hudFPS);
	settings(2,  "hud_xp", "XP Bar", 1605, false, ::update_hudXP, ::toggle_hudXP);
	settings(3,  "hud_2D", "Draw 2D", 1610, true, ::update_hud2D, ::toggle_hud2D);
	settings(4,  "player_voice", "Voice chat", 1620, true, ::update_playerVoice, ::toggle_playerVoice);
	settings(5,  "player_proximity", "Voice proximity", 1623, false, ::update_playerProximity, ::toggle_playerProximity);
	settings(6,  "player_radio", "Radio", 1622, true, ::update_playerRadio, ::toggle_playerRadio);
	settings(7,  "gfx_fov", "FOV Scale", 2630, 1000, ::update_gfxFOV, ::toggle_gfxFOV);
	settings(8,  "gfx_fullbright", "Fullbright", 1602, false, ::update_gfxFullbright, ::toggle_gfxFullbright);
	settings(9, "gfx_ragdoll", "Ragdoll", 1618, false, ::update_gfxRagdoll, ::toggle_gfxRagdoll);

	menu_multiple("sr_settings", "setting", ::menu_Setting);
}

update_hudCrosshair(setting)
{
	value = self.settings["hud_crosshair"];
	labels = strTok("^1OFF;^2Stock;^5Quake;", ";");
	self setClientDvar("cg_drawCrosshair", value == 1);
	self updateHud(setting.index, value, labels[value]);
}

update_hudFPS(setting)
{
	value = self.settings["hud_fps"];
	self setClientDvar("cg_drawfps", value);
	self updateHud(setting.index, value);
}

update_hudXP(setting)
{
	value = self.settings["hud_xp"];
	self setClientDvar("sr_xp_bar", value);
	self updateHud(setting.index, value);
}

update_hud2D(setting)
{
	value = self.settings["hud_2D"];
	self setClientDvar("cg_draw2D", value);
	self updateHud(setting.index, value);
}

update_playerVoice(setting)
{
	value = self.settings["player_voice"];
	self setClientDvar("cl_voice", value);
	self updateHud(setting.index, value);
}

update_playerProximity(setting)
{
	value = self.settings["player_proximity"];
	self ProximityEnable(value);
	self updateHud(setting.index, value);
}

update_playerRadio(setting)
{
	value = self.settings["player_radio"];
	self RadioEnable(value);
	self updateHud(setting.index, value);
}

update_gfxFOV(setting)
{
	value = float(self.settings["gfx_fov"] / 1000);
	self setClientDvar("cg_fovscale", value);
	self updateHud(setting.index, value > 0, fmt("^5%.3f", value));
}

update_gfxFullbright(setting)
{
	value = self.settings["gfx_fullbright"];
	self setClientDvar("r_fullbright", value);
	self updateHud(setting.index, value);
}

update_gfxRagdoll(setting)
{
	value = self.settings["gfx_ragdoll"];
	self setClientDvar("ragdoll_enable", value);
	self updateHud(setting.index, value);
}

toggle_hudCrosshair(setting)
{
	self.settings["hud_crosshair"] = intRange(self.settings["hud_crosshair"], 0, 2);
}

toggle_hudFPS(setting)
{
	self.settings["hud_fps"] = !self.settings["hud_fps"];
}

toggle_hudXP(setting)
{
	self.settings["hud_xp"] = !self.settings["hud_xp"];
}

toggle_hud2D(setting)
{
	self.settings["hud_2D"] = !self.settings["hud_2D"];
}

toggle_playerVoice(setting)
{
	self.settings["player_voice"] = !self.settings["player_voice"];
}

toggle_playerProximity(setting)
{
	self.settings["player_proximity"] = !self.settings["player_proximity"];
}

toggle_playerRadio(setting)
{
	self.settings["player_radio"] = !self.settings["player_radio"];
}

toggle_gfxFOV(setting)
{
	self closeMenu();
	self closeInGameMenu();

	self command("fov");
}

toggle_gfxFullbright(setting)
{
	self.settings["gfx_fullbright"] = !self.settings["gfx_fullbright"];
}

toggle_gfxRagdoll(setting)
{
	self.settings["gfx_ragdoll"] = !self.settings["gfx_ragdoll"];
}
